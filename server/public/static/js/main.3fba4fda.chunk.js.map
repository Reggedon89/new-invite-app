{"version":3,"sources":["reducers/example.reducer.js","store.js","components/Button.js","actions/example.actions.js","components/Greeting.js","serviceWorker.js","index.js","components/App.js"],"names":["initialState","greeting","store","createStore","state","arguments","length","undefined","action","type","Object","objectSpread","payload","Button","props","react_default","a","createElement","onClick","axios","get","then","resp","dispatch","data","Greeting","useSelector","appState","Boolean","window","location","hostname","match","ReactDOM","render","es","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iOAAMA,EAAe,CACnBC,SAAU,ICKGC,EAFDC,YDAC,WAAuC,IAA9BC,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBL,EAAcQ,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpD,OAAQC,EAAOC,MACb,IAAK,WACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAIN,EAAX,CAAkBH,SAAUO,EAAOI,UACrC,QACE,OAAOR,sBENE,IAAAS,EAAA,SAAAC,GAKb,OACEC,EAAAC,EAAAC,cAAA,UAAQC,QALV,WCAAC,IAAMC,IAAI,iBAAiBC,KAAK,SAAAC,GAC9BpB,EAAMqB,SAAS,CACbd,KAAM,WACNG,QAASU,EAAKE,KAAKvB,eDErB,aENWwB,EAAA,SAAAX,GACb,IAAMb,EAAWyB,YAAY,SAAAC,GAAQ,OAAIA,EAAS1B,WAElD,OACEc,EAAAC,EAAAC,cAAA,uBAAehB,ICKC2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOnB,EAAAC,EAAAC,cCID,SAAAH,GACb,OACEC,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAUjC,MAAOA,GACfa,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACJ,EAAD,MACAE,EAAAC,EAAAC,cAACQ,EAAD,SDTQ,MAASW,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.3fba4fda.chunk.js","sourcesContent":["const initialState = {\n  greeting: ''\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case 'GREETING':\n      return {...state, greeting: action.payload}\n    default:\n      return state\n  }\n}","import { createStore } from 'redux'\n\nimport exampleReducer from './reducers/example.reducer'\n\nconst store = createStore(exampleReducer)\n\nexport default store","import React from 'react'\nimport { greet } from '../actions/example.actions'\n\nexport default props => {\n  function sendGreeting() {\n    greet()\n  }\n\n  return (\n    <button onClick={sendGreeting}>Click Me</button>\n  )\n}","import store from '../store'\nimport axios from 'axios'\n\nexport function greet() {\n  axios.get('/api/greeting').then(resp => {\n    store.dispatch({\n      type: 'GREETING',\n      payload: resp.data.greeting\n    })\n  })\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nexport default props => {\n  const greeting = useSelector(appState => appState.greeting)\n\n  return (\n    <h1>Greeting: {greeting}</h1>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\nimport 'normalize.css/normalize.css'\nimport '../styles/App.css'\nimport { Provider } from 'react-redux'\nimport store from '../store'\n\nimport Button from './Button'\nimport Greeting from './Greeting'\n\nexport default props => {\n  return (\n    <Provider store={store}>\n      <div>\n        <Button />\n        <Greeting />\n      </div>\n    </Provider>\n  )\n}"],"sourceRoot":""}